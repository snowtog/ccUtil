#! ccperl -w############################################################################## SCRIPT NAME	: 	ccUtil.pl# PURPOSE		: 	This Perl script is a set of useful ClearCase utilities #my ${Author}	= "Chris Elliott" ;my ${Date}		= "2008/08/21" ;my ${Version}	= "v02.03" ;#############################################################################use Cwd ;use File::Basename ;use File::Copy ;use File::Find ;use Getopt::Long ;use strict ;use warnings ;# Variable Declaration # Site Variables 	my ${pvob} = "grdw" ; #Debug Level [0=None] [1=Show ClearTool Commands] [2=Report Subroutine Names]	my ${debug} = 1 ;# Signal Interrupts	$SIG{INT} = 'sub_interrupt' ;	$SIG{QUIT} = 'sub_interrupt' ;	$SIG{STOP} = 'sub_interrupt' ;	$SIG{ABRT} = 'sub_interrupt' ;    # Environment Variables 	my ${user} = lc $ENV{'USERNAME'} ; 	my ${hostname} = $ENV{'COMPUTERNAME'} ; 	my ${logdir} = $ENV{'HOMESHARE'} ; # Date & Time	  # Initialize DateTime values    my %dttime = ();    my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime(time);  # Initialize DateTime number formats    $dttime{year }  = sprintf "%04d",($year + 1900);  # four digits to specify the year    $dttime{mon  }  = sprintf "%02d",($mon + 1);      # zeropad months    $dttime{mday }  = sprintf "%02d",$mday;           # zeropad day of the month    $dttime{wday }  = sprintf "%02d",$wday + 1;       # zeropad day of week; sunday = 1;    $dttime{yday }  = sprintf "%02d",$yday;           # zeropad nth day of the year    $dttime{hour }  = sprintf "%02d",$hour;           # zeropad hour    $dttime{min  }  = sprintf "%02d",$min;            # zeropad minutes    $dttime{sec  }  = sprintf "%02d",$sec;            # zeropad seconds    $dttime{isdst}  = $isdst; # TAR Archive 	my ${tar} = "tar.exe" ; 	my ${tarfile} ; # ClearCase Directories	my ${ct} = "cleartool" ;	my ${slash} = "\\" ;	my ${share_drive} = "C:" ;	my ${share_dir} = ${slash} . "Data" . ${slash} . "ClearCase" ;	my ${share} = "ClearCase";	my ${unc_share} = ${slash} . ${slash} . ${hostname} . ${slash} . ${share} ;	my ${viewroot} = ${share_drive} . ${share_dir} . ${slash} . "ViewRoot" ;	my ${viewstore} =	${unc_share} . ${slash} . "Views" ;	my ${ccutillog} = ${logdir} . ${slash} . ".ccutil.log" ; # ClearCase Scalars	my ${baseline} ;	my ${blcmd} ;	my ${blType} ;	my ${component} ;	my ${config_spec} ;	my ${elementType} ;	my ${found_bls} ;	my ${latest_bls} ;	my ${myViews} ;	my ${rec_bls} ;	my ${usersView} ;	my ${viewType} ;	my ${vob} ;	my %{project} ;	my @{baselines} ;	my @{ccobject} ;	my @{components} ;	my @{found_blss} ;	my @{latest_blss} ;	my @{myViews} ;	my @{rec_blss} ; # Working Scalars	my ${answer} ;	my ${cmd} ;	my ${exitlevel} = 0 ;	my ${noexit} ;	my ${tag} ;	my ${valid} ;# File Handlers 	open (LOGFILE, ">>", ${ccutillog}) ; 	open (STDERR, ">>", ${ccutillog}) ; 	$| = 1 ;# Get command line options	my ${blankView} ;	my ${dynamicView} ;	my ${force} ;	my ${obsoleteActivity} ;	my ${obsoleteProject} ;	my ${rebaseStage} ;	my ${removeView} ;	my ${rmAllViews} ;	my ${snapView} ;	my ${stageView} ;	my ${streamView} ;	my ${tarStage} ;	my ${tarStream} ;		GetOptions (				'debug=i'				=>		\${debug},				'force'					=>		\${force},				'blankView:s'			=>		\${blankView},				'dynamicView:s'			=>		\${dynamicView},				'obsoleteActivity:s'	=>		\${obsoleteActivity},				'obsoleteProject:s'		=>		\${obsoleteProject},				'rebaseStage:s'			=>		\${rebaseStage},				'removeView:s'			=>		\${removeView},				'rmAllViews'			=>		\${rmAllViews},				'snapView:s'			=>		\${snapView},				'stageView:s'			=>		\${stageView},				'streamView:s'			=>		\${streamView},				'tarStage:s'			=>		\${tarStage},				'tarStream:s'			=>		\${tarStream},			  );			# Subroutine Declarationsub sub_debug(){	my ${msgType} = $_[0] ;	my(${message}) = $_[1] ;	&sub_logmsg(${msgType}, ${message}) ;}sub sub_usage(){	print "\nOptions:\n" ;	print "\t[-debug 0|1|2]\t\t\t\tSets the level of debugging information (default = 1)\n" ;	print "\t[-force]\t\t\t\tRemoves existing views without asking!\n" ;	print "\t[-blankView <streamname>]\t\tCreate a Blank Snapshot View\n" ;	print "\t[-dynamicView <streamname>]\t\tCreate a Dynamic View\n" ;	print "\t[-obsoleteActivity <projectname>]\tObsolete a Projects Activities\n" ;	print "\t[-obsoleteProject <projectname>]\tObsolete a Project entirely\n" ;	print "\t[-rebaseStage <streamname>]\t\tRebase and Load Staging View\n" ;	print "\t[-removeView <viewname>]\t\tRemove a View\n" ;	print "\t[-rmAllViews]\t\t\t\tRemove All your Views\n" ;	print "\t[-snapView <streamname>]\t\tCreate a full Snapshot View: (Loads all files)\n" ;	print "\t[-stageView <streamname>]\t\tCreate a Staging View: (Loads Baseline files) \n" ;	print "\t[-streamView <streamname>]\t\tCreate a Stream View: (Loads Streams files)\n" ;	print "\t[-tarStage <streamname>]\t\tCreate a TAR archive file of a Stage View\n" ;	print "\t[-tarStream <streamname>]\t\tCreate a TAR archive file of a Stream View\n" ;}sub sub_utilityDetails(){	(${debug} > 1) && &sub_debug(3, "sub_utilityDetails") ;	(${debug} < 2) && system(($^O eq 'MSWin32') ? 'cls' : 'clear') ; # Clears the screen	my(${filename}) = basename $0 ;	&sub_logmsg (3, "${filename} - Version: ${Version}") ;	&sub_logmsg (3, "ClearCase Region Information: ${pvob}") ;}sub sub_interrupt(){	my(${signal})=@_ ;	(${debug} > 1) && &sub_debug(3, "sub_interrupt(${signal}") ;	&sub_closeWait(4, "Interrupt: Caught signal $signal exiting") ;}sub sub_logmsg(){	my ${msgType} = $_[0] ;	my(${message}) = $_[1] ;	my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime(time);	if    (${msgType} == 1) { print "\nCL: ${message}\n" ; }	elsif (${msgType} == 2) { print "\nInput: ${message}" ; }	elsif (${msgType} == 3) { print "\nInfo: ${message}\n" ; }	elsif (${msgType} == 4) { print "\nError: ${message}\n" ; }	print (LOGFILE "\n$dttime{year}/$dttime{mon}/$dttime{mday} $dttime{hour}:$dttime{min}\t${message}") ;}	   sub sub_askQuestion(){	(${debug} > 1) && &sub_debug(3, "sub_askQuestion") ;	my(${question}) = $_[0] ;	my(${ccobject}) = $_[1] ;	&sub_logmsg(2, "${question}") ;	chomp(${answer} = <STDIN>) ;	if (${answer} eq "")		{		  &sub_closeWait(3, "-- ccUtil exiting --") ;		}	elsif (${answer} eq "?")		{		  &sub_listCCobject(${ccobject}) ;		  &sub_askQuestion(${question}, ${ccobject}) ;		}}sub sub_snapshotView(){	my(${tmode}) = @_ ;	(${debug} > 1) && &sub_debug(3, "sub_snapshotView(${tmode})") ;	${cmd} = ${ct} . " mkview -tmode " . ${tmode} . " -ptime -snapshot -tag " . ${project}{"view"} . " -vws " . ${viewstore} . ${slash} . ${project}{"view"} . ".vws" . " -stream stream:" . ${project}{"stream"} . "@" . ${slash} . ${pvob} . " " . ${usersView} ;	(${debug} > 0) && &sub_debug(1, ${cmd}) ;	system("${cmd}") ;	${exitlevel} = $? ;}sub sub_dynamicView(){	(${debug} > 1) && &sub_debug(3, "sub_dynamicView") ;	${cmd} = ${ct} . " mkview -tag " . ${project}{"view"} . " -stream stream:" . ${project}{"stream"} . "@" . ${slash} . ${pvob} . " " . ${viewstore} . ${slash} . ${project}{"view"} . ".vws" ;	(${debug} > 0) && &sub_debug(1, ${cmd}) ;	system("${cmd}") ;	${exitlevel} = $? ;}sub sub_validateCCobject() {	my(${ccobject}) = @_ ;	(${debug} > 1) && &sub_debug(3, "sub_validateCCobject(${ccobject})") ;	${cmd} = ${ct} . " ls" . ${ccobject}." -short ". ${project}{${ccobject}} . "@" . ${slash} . ${pvob} ;	${project}{"view"} = ${user} . "_" . ${project}{"stream"} ;	(${debug} > 0) && &sub_debug(1, ${cmd}) ;	${valid} = `${cmd}` ;	${exitlevel} = $? ;	chomp(${valid}) ;	(${valid} ne $project{${ccobject}}) && &sub_closeWait(4, "Invalid ${ccobject}: \"$project{$ccobject}\"") ;}sub sub_validateView(){	(${debug} > 1) && &sub_debug(3, "sub_validateView") ;	${usersView} = ${viewroot} . ${slash} . ${project}{"view"} ;	${cmd} = ${ct} . " lsview -long -properties -full " . ${project}{"view"} ;	(${debug} > 0) && &sub_debug(1, ${cmd}) ;	${valid} = `${cmd}` ;	${exitlevel} = $? ;}sub sub_listCCobject(){	my(${ccobject}) = @_ ;	(${debug} > 1) && &sub_debug(3, "sub_listCCobject(${ccobject})") ;	if (${ccobject} eq "stream")		{		  ${cmd} = ${ct} . " ls" . ${ccobject} . " -fmt \"%n\t \" " . "-invob " . ${slash} . ${pvob} ;		}	elsif (${ccobject} eq "view")		{		  ${cmd} = ${ct} . " ls" . ${ccobject} . " -short " . ${user} . "*" ;		}	(${debug} > 0) && &sub_debug(1, ${cmd}) ;	print "\n" ;	system("${cmd}") ;	${exitlevel} = $? ;	print "\n" ;}sub sub_projectDetails(){	(${debug} > 1) && &sub_debug(3, "sub_projectDetails") ;	${cmd} = ${ct} . " lsproject -fmt \"%[istream]p\" " . ${project}{"project"} . "@" . ${slash} . ${pvob} ;	(${debug} > 0) && &sub_debug(1, ${cmd}) ;	${project}{"stream"} = `${cmd}` ;	${exitlevel} = $? ;	${project}{"brtype"} = `${cmd}` ;	${exitlevel} = $? ;	${cmd} = ${ct} . " lsstream -fmt \"%[activities]p\" " . ${project}{"stream"} . "@" . ${slash} . ${pvob} ;	(${debug} > 0) && &sub_debug(1, ${cmd}) ;	${project}{"activity"} = `${cmd}` ;	${exitlevel} = $? ;}sub sub_unLock(){	my(${ccobject}) = @_ ;	(${debug} > 1) && &sub_debug(3, "sub_unLock(${ccobject})") ;	${cmd} = ${ct} . " unlock " . ${ccobject} . ":" . ${project}{${ccobject}} . "@" . ${slash} . ${pvob} ;	(${debug} > 0) && &sub_debug(1, ${cmd}) ;	system("${cmd}") ;	${exitlevel} = $? ;}	sub sub_obsolete(){	my(${ccobject}) = @_ ;	(${debug} > 1) && &sub_debug(3, "sub_obsolete(${ccobject})") ;	@{ccobject} = split / /, ${project}{${ccobject}} ;	if (${ccobject} eq "project")		{		  ${cmd} = ${ct}." chproject -to folder:Obsolete ".${project}{${ccobject}}."@".${slash}.${pvob} ;		  (${debug} > 0) && &sub_debug(1, ${cmd}) ;		  system("${cmd}") ;		  ${exitlevel} = $? ;		}	foreach (@{ccobject})	{	  ${cmd} = ${ct}." lock -obsolete -replace ".${ccobject}.":".$_."@".${slash}.${pvob} ;	  (${debug} > 0) && &sub_debug(1, ${cmd}) ;	  system("${cmd}") ;	  ${exitlevel} = $? ;	}}sub sub_rmView(){	(${debug} > 1) && &sub_debug(3, "sub_rmView") ;	chdir ${viewroot};	# If a dynamic view, set -tag	if (${valid} =~ /dynamic/)		{		  ${tag} = "-tag " ;		  ${viewType} = "Dynamic" ;		}	else		{		  ${tag} = " " ;		  ${viewType} = "Snaphot" ;		}	if (! defined ${force})		{		  &sub_askQuestion("Remove existing ${viewType} View: $project{\"view\"} ? [Y/N]: ") ;		  if (${answer} =~ /\bY\b/i)			{			  ${cmd} = ${ct} . " rmview " . ${tag} . ${project}{"view"} ;			  (${debug} > 0) && &sub_debug(1, ${cmd}) ;			  system("${cmd}") ;			  ${exitlevel} = $? ;			}		  elsif (! defined ${noexit})		  	{			  &sub_closeWait(3, "-- ccUtil exiting --") ;			}		}	else		{		  ${cmd} = ${ct} . " rmview " . ${tag} . ${project}{"view"} ;		  (${debug} > 0) && &sub_debug(1, ${cmd}) ;		  system("${cmd}") ;		  ${exitlevel} = $?		}}sub sub_rmAllViews(){	(${debug} > 1) && &sub_debug(3, "sub_rmAllViews") ;	${cmd} = ${ct} . " lsview -short " . ${user} . "*" ;	(${debug} > 0) && &sub_debug(1, ${cmd}) ;	${myViews} = `${cmd}` ;	${exitlevel} = $? ;	${noexit} = "noExit" ;	@{myViews} = split /\n/, ${myViews} ;	foreach (@{myViews})		{		  ${project}{"view"} = $_ ;		  &sub_validateView ;		  (${valid}) && &sub_rmView ;		}}	sub sub_baselines(){	my(${blType}) = @_ ;	(${debug} > 1) && &sub_debug(3, "sub_baselines(${blType})") ;	chdir ${usersView} or &sub_closeWait(4, "Can't change directory to ${usersView}: $!") ;	${cmd} = ${ct} . " lsstream -fmt \"%[${blType}]p\" " . ${project}{"stream"} . "@" . ${slash} . ${pvob} ;	(${debug} > 0) && &sub_debug(1, ${cmd}) ;	${baseline} = `${cmd}` ;	${exitlevel} = $? ;	@{baselines} = split / /, ${baseline} ;}sub sub_rebase(){	# Subroutine to rebase a staging stream.	# A baseline entered with a '-' will result in that baseline being removed.	(${debug} > 1) && &sub_debug(3, "sub_rebase") ;	&sub_baselines(@_) ;	&sub_logmsg (3, "Current Foundation Baselines: @{baselines}") ;	&sub_askQuestion("Enter new Baseline: ") ;	${baseline} = ${answer} ;	if (${baseline} =~ /-.*/)		{		  ${blcmd} = "-dbaseline" ;		  ${baseline} =~ s/-// ;		}	else { ${blcmd} = "-baseline" ;	}	${cmd} = ${ct} . " lsbl -short " . ${baseline} . "@" . ${slash} . ${pvob} ;	(${debug} > 0) && &sub_debug(1, ${cmd}) ;	${valid} = `${cmd}` ;	${exitlevel} = $? ;	if (${valid} =~ /${baseline}/)		{		  ${cmd} = ${ct} . " rebase -complete -view " . ${project}{"view"} . " " . ${blcmd} . " " . ${baseline} . "@" . ${slash} . ${pvob} ;		  (${debug} > 0) && &sub_debug(1, ${cmd}) ;		  system("${cmd}") ;		  ${exitlevel} = $? ;		}	else { &sub_closeWait(4, "Baseline not recognised: ${baseline}") ; }}sub sub_baselineComponents(){	my(${baseline}) = @_ ;	(${debug} > 1) && &sub_debug(3, "sub_baselineComponents(${baseline})") ;	${cmd} = ${ct} . " lsbl -fmt \"%[component]p\" " . ${baseline} . "@" . ${slash} . ${pvob} ;	(${debug} > 0) && &sub_debug(1, ${cmd}) ;	${component} = `${cmd}` ;	${exitlevel} = $? ;}sub sub_baselineElements(){	# Subroutine to load just the files identified by a Baseline	my(${blType}) = @_ ;	(${debug} > 1) && &sub_debug(3, "sub_baselineElements(${blType})") ;	&sub_baselines(${blType}) ;	foreach (@{baselines})	{	  &sub_baselineComponents($_) ;	  ${cmd} = ${ct} . " find " . ${component} . " -type f -nxname -element \"lbtype_sub(" . $_ . ")\" -exec \"cmd /c echo load \"\"\\%CLEARCASE_PN%\"\"\" >> " . ${share_dir} . ${slash} . "Views" . ${slash} . ${project}{"view"} . ".vws" . ${slash} . "config_spec" ;	  (${debug} > 0) && &sub_debug(1, ${cmd}) ;	  system("${cmd}") ;	  ${exitlevel} = $? ;	}}sub sub_streamElements(){	# Subroutine to load just the files identified by a Stream	my(${blType}) = @_ ;	(${debug} > 1) && &sub_debug(3, "sub_streamElements(${blType})") ;	&sub_baselines(${blType}) ;	foreach (@{baselines})	{	  &sub_baselineComponents($_) ;	  ${cmd} = ${ct} . " find " . ${component} . " -type f -nxname -element \"brtype(" . ${project}{"stream"} . ")\" -exec \"cmd /c echo load \"\"\\%CLEARCASE_PN%\"\"\" >> " . ${share_dir} . ${slash} . "Views" . ${slash} . ${project}{"view"} . ".vws" . ${slash} . "config_spec" ;	  (${debug} > 0) && &sub_debug(1, ${cmd}) ;	  system("${cmd}") ;	  ${exitlevel} = $? ;	}}sub sub_loadComponents(){	# Subroutine to load all the conponents files	my(${blType}) = @_ ;	(${debug} > 1) && &sub_debug(3, "sub_loadComponents(${blType})") ;	${config_spec} = ${share_dir} . ${slash} . "Views" . ${slash} . ${project}{"view"} . ".vws" . ${slash} . "config_spec" ;	open (CONFIG_SPEC, ">>", ${config_spec}) ;	&sub_baselines(${blType}) ;	foreach (@{baselines})	{		&sub_baselineComponents($_) ;		print (CONFIG_SPEC "load \\${component}\n") ;	}	close CONFIG_SPEC ;}sub sub_updateView(){	(${debug} > 1) && &sub_debug(3, "sub_updateView") ;	&sub_logmsg (3, "Updating View: ${user}_$project{stream}") ;	${cmd} = ${ct} . " setcs -current" ;	(${debug} > 0) && &sub_debug(1, ${cmd}) ;	system("${cmd}") ;	${exitlevel} = $? ;}sub sub_createTAR(){	my(${blType}) = @_ ;	(${debug} > 1) && &sub_debug(3, "sub_createTAR(${blType})") ;	&sub_baselines(${blType}) ;	chdir ${usersView} ;	&sub_askQuestion("Enter name for archive TAR file. (eg. CMR1234567): ") ;	${tarfile} = ${viewroot} . ${slash} . ${answer} . ".tar" ;	if (-f ${tarfile} )		{		  &sub_askQuestion("Remove existing archive TAR file: \"${tarfile}\" ? [Y/N]: ") ;		  (${answer} =~ /\bY\b/i) && (unlink(${tarfile}) || die &sub_closeWait(4, "Can't remove file: $! -- ccUtil exiting --"))  || &sub_closeWait(3, "-- ccUtil exiting --") ;		}	foreach (@{baselines})		{		  &sub_baselineComponents($_) ;		  chdir "${usersView}${slash}${component}" ;		  ${cmd} = ${tar} . " -rvf " . ${tarfile} . " *" ;		  (${debug} > 0) && &sub_debug(1, ${cmd}) ;		  system("${cmd}") ;		  ${exitlevel} = $? ;		}	(-f ${tarfile} ) && &sub_logmsg(3, "Archive file created: ${tarfile}") || &sub_logmsg(4, "Failed to create Archive file: ${tarfile}") ;}sub sub_closeWait(){	(${debug} > 1) && &sub_debug(3, "sub_closeWait") ;	my ${msgType} = $_[0] ;	my(${message}) = $_[1] ;	&sub_logmsg(${msgType}, ${message});	(${debug} > 1) && &sub_debug(${msgType}, "Exit Level: ${exitlevel}") ;	close LOGFILE ;	if (! defined ${force})		{		  print "\n<Return> to close ..." ;		  <STDIN> ;		}	exit ${exitlevel} ;}	###########################	##                       ##    ## Start of Main Program ####                       ##    ###########################	# Check for Debug Mode	if (${debug})		{		   (${debug} > 1) && &sub_debug(3, "Debug") ;		}	# ClearCase Region Notification	&sub_utilityDetails ;	# Check for Force Mode	if (${force})		{		  (${debug} > 1) && &sub_debug(3, "Force") ;		  &sub_logmsg(3, "Force");		  ${force} = "YES" ;		}			# Change directory to C:\Data\ClearCase\ViewRoot as UNC Paths are not supported	chdir ${viewroot} ;# Process the Commandline Options # Stage View Option	if (defined ${stageView})		{		  (${debug} > 1) && &sub_debug(3, "Stage View") ;		  if (${stageView} eq "")		  	{		  	  &sub_askQuestion("Enter Staging Project Stream Name: ", "stream") ;		  	  ${project}{"stream"} = ${answer} ;		  	}		  else			{		  	  ${project}{"stream"} = ${stageView} ;			}		  &sub_validateCCobject("stream") ;		  &sub_validateView ;		  (${valid}) && &sub_rmView ;		  &sub_snapshotView("transparent") ;		  &sub_baselineElements("found_bls") ;		  &sub_updateView ;		} # Archive Stage View Option	elsif (defined ${tarStage})		{		  (${debug} > 1) && &sub_debug(3, "TAR Stage View") ;		  if (${tarStage} eq "")		  	{		  	  &sub_askQuestion("Enter Staging Project Stream Name: ", "stream") ;		  	  ${project}{"stream"} = ${answer} ;		  	}		  else		    {			  ${project}{"stream"} = ${tarStage} ;			}		  &sub_validateCCobject("stream") ;		  &sub_validateView ;		  (${valid}) && &sub_rmView ;		  &sub_snapshotView("strip_cr") ;		  &sub_baselineElements("found_bls") ;		  &sub_updateView ;		  &sub_createTAR("found_bls") ;		} # Stream View Option	elsif (defined ${streamView})		{		  (${debug} > 1) && &sub_debug(3, "Stream View") ;		  if (${streamView} eq "")		  	{		  	  &sub_askQuestion("Enter Project Stream Name: ", "stream") ;		  	  ${project}{"stream"} = ${answer} ;		  	}		  else		  	{		  	  ${project}{"stream"} = ${streamView} ;		  	}		  &sub_validateCCobject("stream") ;		  &sub_validateView ;		  (${valid}) && &sub_rmView ;		  &sub_snapshotView("transparent") ;		  &sub_streamElements("found_bls") ;		  &sub_updateView ;		} # Archive Stream View Option	elsif (defined ${tarStream})		{		  (${debug} > 1) && &sub_debug(3, "TAR Stream View") ;		  if (${tarStage} eq "")		  	{		  	  &sub_askQuestion("Enter Project Stream Name: ", "stream") ;		  	  ${project}{"stream"} = ${answer} ;		  	}		  else		    {			  ${project}{"stream"} = ${tarStage} ;			}		  &sub_validateCCobject("stream") ;		  &sub_validateView ;		  (${valid}) && &sub_rmView ;		  &sub_snapshotView("strip_cr") ;		  &sub_streamElements("found_bls") ;		  &sub_updateView ;		  &sub_createTAR("found_bls") ;		} # Snapshot View Option	elsif (defined ${snapView})		{		  (${debug} > 1) && &sub_debug(3, "Snapshot View") ;		  if (${snapView} eq "")		  	{		  	  &sub_askQuestion("Enter Project Stream Name: ", "stream") ;		  	  ${project}{"stream"} = ${answer} ;		  	}		  else		  	{		  	  ${project}{"stream"} = ${snapView} ;		  	}		  &sub_validateCCobject("stream") ;		  &sub_validateView ;		  (${valid}) && &sub_rmView ;		  &sub_snapshotView("transparent") ;		  &sub_loadComponents("latest_bls") ;		  &sub_updateView ;		} # Dynamic View Option	elsif (defined ${dynamicView})		{		  (${debug} > 1) && &sub_debug(3, "Dynamic View") ;		  if (${dynamicView} eq "")		  	{		  	  &sub_askQuestion("Enter Project Stream Name: ", "stream") ;		  	  ${project}{"stream"} = ${answer} ;		  	}		  else		  	{		  	  ${project}{"stream"} = ${dynamicView} ;		  	}		  &sub_validateCCobject("stream") ;		  &sub_validateView ;		  (${valid}) && &sub_rmView ;		  &sub_dynamicView ;		} # Blank Snapshot View Option	elsif (defined ${blankView})		{		  (${debug} > 1) && &sub_debug(3, "Empty View") ;		  if (${blankView} eq "")		  	{		  	  &sub_askQuestion("Enter Project Stream Name: ", "stream") ;		  	  ${project}{"stream"} = ${answer} ;		  	}		  else		  	{		  	  ${project}{"stream"} = ${blankView} ;		  	}		  &sub_validateCCobject("stream") ;		  &sub_validateView ;		  (${valid}) && &sub_rmView ;		  &sub_snapshotView("transparent") ;		} # Remove single View Option	elsif (defined ${removeView})		{		  (${debug} > 1) && &sub_debug(3, "Remove View") ;		  if (${removeView} eq "")		  	{		  	  &sub_askQuestion("Enter View Name to Remove: ", "view") ;		  	  ${project}{"view"} = ${answer} ;		  	}		  else		  	{		  	  ${project}{"view"} = ${removeView} ;		  	}		  &sub_validateView ;		  (${valid}) && &sub_rmView ;		} # Remove All Your Views Option	elsif (defined ${rmAllViews})		{		  (${debug} > 1) && &sub_debug(3, "Remove All My Views") ;		  &sub_rmAllViews ;		} # Rebase Stage View Option	elsif (defined ${rebaseStage})		{		  (${debug} > 1) && &sub_debug(3, "Rebase View") ;		  if (${rebaseStage} eq "")		  	{		  	  &sub_askQuestion("Enter Project Stream Name to Rebase: ", "stream") ;		  	  ${project}{"stream"} = ${answer} ;		  	}		  else		  	{			  ${project}{"stream"} = ${rebaseStage} ;		  	}		  &sub_validateCCobject("stream") ;		  &sub_validateView ;		  (${valid}) && &sub_rmView ;		  &sub_snapshotView("transparent") ;		  &sub_rebase("found_bls") ;		  &sub_baselineElements("found_bls") ;		  &sub_updateView ;		} # Lock Obsolete Streams Activities Option	elsif (defined ${obsoleteActivity})		{		  (${debug} > 1) && &sub_debug(3, "Obsolete Activity") ;		  if (${obsoleteActivity} eq "")		  	{		  	  &sub_askQuestion("Enter Project containing Activities: ", "project") ;		  	  ${project}{"project"} = ${answer} ;		  	}		  else		  	{		  	  ${project}{"stream"} = ${obsoleteActivity} ;		  	}		  &sub_validateCCobject("project") ;		  &sub_projectDetails(${project}{"project"}) ;		  &sub_obsolete("activity") ;		} # Lock Obsolete whole Project Option	elsif (defined ${obsoleteProject})		{		  (${debug} > 1) && &sub_debug(3, "Obsolete Project") ;		  if (${obsoleteProject} eq "")		  	{		  	  &sub_askQuestion("Enter Project Name to Obsolete: ", "project") ;		  	  ${project}{"project"} = ${answer} ;		  	}		  else		  	{		  	  ${project}{"project"} = ${obsoleteProject} ;		  	}		  &sub_validateCCobject("project") ;		  &sub_projectDetails(${project}{"project"}) ;		  &sub_unLock("project") ;		  &sub_unLock("stream") ;		  &sub_obsolete("activity") ;		  &sub_obsolete("brtype") ;		  &sub_obsolete("stream") ;		  &sub_obsolete("project") ;		} # Option not recognised.	else		{		  (${debug} > 1) && &sub_debug(3, "Invalid Option") ;		  &sub_usage ;		}				# Clean and Close 	&sub_closeWait(3, "-- ccUtil completed --") ;